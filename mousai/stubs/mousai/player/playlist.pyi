import io
from datetime import datetime
from pathlib import Path
from typing import Any, Iterator, List, NamedTuple, Optional

SUPPORTED_AUDIO_FILES: Any

class AudioMetaData(NamedTuple):
    file_name: str
    playtime: int
    artist: Optional[str]
    album: Optional[str]
    title: Optional[str]
    genre: Optional[str]
    release_date: Optional[datetime]
    art: Optional[io.BytesIO]
    @classmethod
    def from_file(cls, path: Path) -> AudioMetaData: ...

class PlaylistItem:
    path: Any
    meta: Any
    added: Any
    def __init__(self, path, meta_data) -> None: ...
    @classmethod
    def from_file(cls, path: Path) -> PlaylistItem: ...

class Playlist:
    songs: Any
    def __init__(self, songs: List[PlaylistItem] = ...) -> None: ...
    def __iter__(self) -> Iterator[PlaylistItem]: ...
    def __getitem__(self, key) -> PlaylistItem: ...
    def __setitem__(self, key, value: PlaylistItem) -> None: ...
    def __len__(self): ...
    def add(self, item: PlaylistItem) -> None: ...
    def remove(self, item_index) -> None: ...
    def get_random_item(self) -> PlaylistItem: ...
    def remove_duplicates(self, item) -> None: ...

class PlayerError(Exception): ...
